@inject IJSRuntime jsRuntime
@using FormBuilder.Models

<div class="@GetClass()"
     draggable="true"
     ondragover="event.preventDefault()"
     @ondragstart="@(async (e) => await HandleDragStart())"
     @ondrop="@(async(e) => await HandleDrop(e))"
     @ondragenter="@(async (e) => await HandleDragEnter())"
     @ondragleave="@(async (e) => await HandleDragLeave())"></div>

@code {
    private Dictionary<AnchorDirections, string> mappingDirectionToClassName = new Dictionary<AnchorDirections, string>
    {
        { AnchorDirections.TOP, "top" },
        { AnchorDirections.RIGHT, "right" },
        { AnchorDirections.BOTTOM, "bottom" },
        { AnchorDirections.LEFT, "left" }
    };
    [Parameter] public string DraggableComponentId { get; set; }
    [Parameter] public bool IsHover { get; set; }
    [Parameter] public WorkflowStep Step { get; set; }
    [Parameter] public WorkflowLink SelectedLink { get; set; }
    [Parameter] public AnchorDirections Direction { get; set; }
    [Parameter] public EventCallback<WorkflowLink> LinkDropped { get; set; }
    [Parameter] public EventCallback<bool> IsHoverChanged { get; set; }
    [Parameter] public EventCallback<WorkflowLink> SelectedLinkChanged { get; set; }

    private string GetClass()
        => $"anchor {mappingDirectionToClassName[Direction]}";

    private async Task HandleDragStart()
    {
        // SelectedLink = WorkflowLink.Create(Step.Id, Direction);
        // SelectedLink.InitCoordinate(Step);
        // await SelectedLinkChanged.InvokeAsync(SelectedLink);
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        if (SelectedLink == null) return;
        SelectedLink.TargetStepId = Step.Id;
        // SelectedLink.TargetDirection = Direction;
        await LinkDropped.InvokeAsync(SelectedLink.Clone() as WorkflowLink);
    }

    private async Task HandleDragEnter()
    {
        IsHover = true;
        await IsHoverChanged.InvokeAsync(IsHover);
    }

    private async Task HandleDragLeave()
    {
        IsHover = false;
        await IsHoverChanged.InvokeAsync(IsHover);
    }
}
