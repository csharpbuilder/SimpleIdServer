@using FormBuilder.Components.Form
@using FormBuilder.Models
@using System.Diagnostics
@using FormBuilder.Services
@inject IJSRuntime jsRuntime
@inject IFormBuilderJsService formBuilderJsService

<RadzenRow class="fullHeight workflowEditor">    
    <RadzenColumn Size="2">        
        <RadzenStack class="toolbar fullHeight">
            <div class="category">
                <RadzenText TextStyle="TextStyle.H6" class="title">Elements</RadzenText>
                <ul class="elements">
                    @foreach (var record in Records)
                    {
                        <li draggable="true" @ondragstart="@(async () => await HandleDragStart(record))">
                            <div class="icon"></div><span class="text">@record.Name</span>
                        </li>
                    }
                </ul>
            </div>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="10">
        <svg @ref="@svgRef" class="workflowDig" @ondragover:preventDefault="true" @ondragover="@((e) => HandleDragHover(e))" @ondrop="@((e) => HandleDrop(e))">
            <defs>
                <marker id='head'
                        orient="auto"
                        markerWidth='3'
                        markerHeight='4'
                        refX='0.1'
                        refY='2'>
                    <path d='M0,0 V4 L2,2 Z' fill="black" />
                </marker>
            </defs>
            @foreach (var step in Workflow.Steps)
            {
                <WorkflowEditorStep Step="@step" SelectedStepChanged="@(async (e) => await HandleSelectedStepChanged(e))" SelectedStep="@selectedStep" SelectedLink="@selectedLink" Records="@Records" WorkflowLinkChanged="@(async (item) => await HandleWorkflowLinkChanged(item))" LinkDropped="HandleLinkDropped"></WorkflowEditorStep>
            }

            @foreach (var link in Workflow.Links)
            {
                <path marker-end="url(#head)" stroke-width="2" fill="none" stroke="black" d="@GetLinkCoordinate(link)"></path>
            }
            @if(selectedLink != null)
            {
                <path marker-end="url(#head)" stroke-width="2" fill="none" stroke="black" d="@GetLinkCoordinate(selectedLink)"></path>
            }
        </svg>
    </RadzenColumn>
</RadzenRow>

@code {
    private ElementReference _divRef;
    [Parameter] public List<FormRecord> Records { get; set; }
    private WorkflowViewerContext WorkflowContext { get; set; } = new WorkflowViewerContext();
    private WorkflowStep selectedStep { get; set; }
    private FormRecord selectedFormRecord;
    private WorkflowLink selectedLink { get; set; }
    private WorkflowRecord Workflow { get; set; } = new WorkflowRecord();
    private ElementReference svgRef;
    private Coordinate svgPosition;

    #region Drag & Drop UI element

    private async Task HandleSelectedStepChanged(WorkflowStep step)
    {
        svgPosition = await formBuilderJsService.GetPosition(svgRef);
        selectedStep = step;
        selectedFormRecord = null;
        selectedLink = null;
    }

    private async Task HandleDragStart(FormRecord record)
    {
        svgPosition = await formBuilderJsService.GetPosition(svgRef);
        selectedStep = null;
        selectedFormRecord = record;
        selectedLink = null;
    }

    private void HandleDragHover(DragEventArgs args)
    {
        var positionX = Math.Floor(args.ClientX - svgPosition.X);
        var positionY = Math.Floor(args.ClientY - svgPosition.Y);
        if (TryDragSelectedLink()) return;
        TryDragSelectedStep();

        bool TryDragSelectedLink()
        {
            if (selectedLink == null || selectedLink.IsLinkHoverStep) return false;
            selectedLink.TargetCoordinate.X = positionX;
            selectedLink.TargetCoordinate.Y = positionY;
            return true;
        }

        bool TryDragSelectedStep()
        {
            if (selectedStep == null) return false;
            selectedStep.Coordinate.X = positionX;
            selectedStep.Coordinate.Y = positionY;
            var links = Workflow.GetLinks(selectedStep);
            foreach (var link in links)
                link.UpdateCoordinate(selectedStep);
            return true;
        }
    }

    private void HandleDrop(DragEventArgs args)
    {
        if (TryDropSelectedLink()) return;
        TryDropFormRecord();
        selectedStep = null;

        bool TryDropSelectedLink()
        {
            if (selectedLink != null)
            {
                selectedLink = null;
                return true;
            }

            return false;
        }

        bool TryDropFormRecord()
        {
            if (selectedFormRecord == null) return false;
            var id = Guid.NewGuid().ToString();
            Workflow.Steps.Add(new WorkflowStep
            {
                Id = id,
                Coordinate = new Coordinate
                {
                    X = args.OffsetX,
                    Y = args.OffsetY
                },
                FormRecordName = selectedFormRecord.Name
            });
            selectedFormRecord = null;
            return true;
        }
    }

    #endregion

    #region Drag & Drop Arrow

    private void HandleLinkDropped(WorkflowStep workflowStep)
    {
        var clone = this.selectedLink.Clone();
        clone.TargetStepId = workflowStep.Id;
        Workflow.Links.Add(clone);
        selectedLink = null;
    }

    #endregion

    private async Task HandleWorkflowLinkChanged((FormEltEventArgs args, WorkflowStep step) item)
    {
        var args = item.args;
        var parentStep = item.step;
        svgPosition = await formBuilderJsService.GetPosition(svgRef);
        var eltSize = await formBuilderJsService.GetSize(args.EltReference);
        var eltPosition = await formBuilderJsService.GetPosition(args.EltReference);
        var stepPosition = await formBuilderJsService.GetPosition(parentStep.EltRef);
        var coordinateRelativeToStep = eltPosition - stepPosition;
        selectedStep = null;
        selectedFormRecord = null;
        selectedLink = WorkflowLink.Create(parentStep.Id, args.Record, eltPosition - svgPosition, eltSize, coordinateRelativeToStep);
    }

    private string GetLinkCoordinate(WorkflowLink link)
        => $"M{link.SourceCoordinate.X} {link.SourceCoordinate.Y} {link.TargetCoordinate.X} {link.TargetCoordinate.Y}";

    private FormRecord GetFormRecord(string name)
        => Records.Single(t => t.Name == name);
}