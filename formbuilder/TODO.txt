=> pouvoir mettre à jour la définition JSON du formulaire						:	DONE
=> pouvoir publier un formulaire												:	DONE
=> ajouter un panel de configuration pour JSON - WORKFLOW						:	DONE
=> pouvoir mettre à jour le workflow											:	DONE
=> pouvoir publier le workflow													:	DONE
=> pouvoir éditer le formulaire dans l'application blazor						:	DONE
=> pouvoir sauvegarder un formulaire dans SID									:	DONE
=> pouvoir publier un formulaire dans SID										:	DONE
=> pouvoir sauvegarder le style CSS d'un formulaire dans SID					:	DONE
=> passer tous les layous														:	DONE
=> créer tous les layouts														:	DONE

=> afficher un workflow complet pour PWD										:	DONE
=> afficher correctement les étapes												:	DONE
=> vérifier si le debug fonctionne encore avec changement sur EltCorrelationId	:	DONE
=> ne pas afficher tous les autres layouts										:	DONE
=> forcer l'étape : pwd => resetPwd => resetPwdConfirm							:	DONE
=> => changer l'icône : rond vide quand éditable								:	DONE
=> => rond plein quand non éditable												:	DONE
=> => ajouter lock quand non éditable											:	DONE
=> => 

=> pouvoir enregistrer un workflow dans SID										:	OK
=> lorsqu'un ACR est créé alors créer un workflow vide							:	OK
=> dupliquer tous les workflows & forms quand realm est créé					:	OK
=> pouvoir changer la langue													:	OK
=> Le realm est NULL / vide pourquoi ???										:	TODO
=> quand on clique plusieurs fois comprendre pourquoi le formulaire est NULL dans le backend		:	TODO (toujorus même problème avec AT)
=> comprendre pourquoi l'issuer de l'access token n'est pas valide				:	TODO
=> vérifier si le workflow fonctionne correctement sur SID						:	TODO

=> utiliser VS code copilot										:	TODO

=> vérifier comment imposer les conditions vers le prochain workflow		:	TODO




        public IdServerBuilder EnableConfigurableAuthentication()
        {
            _serviceCollection.AddScoped<IAuthenticationSchemeProvider, DynamicAuthenticationSchemeProvider>();
            _serviceCollection.AddScoped<ISIDAuthenticationSchemeProvider>(x => x.GetService<IAuthenticationSchemeProvider>() as ISIDAuthenticationSchemeProvider);
            _serviceCollection.AddScoped<IAuthenticationHandlerProvider, DynamicAuthenticationHandlerProvider>();
            return this;
        }