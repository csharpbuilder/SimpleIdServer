@using FormBuilder.Components.Form
@using FormBuilder.Models
@using System.Diagnostics
@using FormBuilder.Services
@inject IJSRuntime jsRuntime
@inject IFormBuilderJsService formBuilderJsService

<RadzenRow class="fullHeight workflowEditor">    
    <RadzenColumn Size="2">        
        <RadzenStack class="toolbar fullHeight">
            <div class="category">
                <RadzenText TextStyle="TextStyle.H6" class="title">Elements</RadzenText>
                <ul class="elements">
                    @foreach (var record in Records)
                    {
                        <li draggable="true" @ondragstart="@(async () => await HandleDragStart(record))">
                            <div class="icon"></div><span class="text">@record.Name</span>
                        </li>
                    }
                </ul>
            </div>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="10" @ref=_svgContainer>
        <svg @ref="@svgRef" 
            viewBox="@viewBox"
            class="workflowDig"
            @onmousedown="@((e) => HandleOnPanStart(e))"
            @onmousemove="@(async (e) => await HandleOnPanMove(e))"
            @onmouseup="@((e) => HandleOnPanLeave())"
            @ondragover:preventDefault="true" 
            @ondragover="@(async (e) => await HandleDragHover(e))" 
            @ondrop="@(async (e) => await HandleDrop(e))" 
            @onmousewheel="@HandleZoom" 
            @onmousewheel:preventDefault=true 
            @onmousewheel:stopPropagation=true>
            @foreach (var step in Workflow.Steps)
            {
                <WorkflowEditorStep Step="@step" StepRemoved="HandleStepRemoved" SelectedStepChanged="@(async (e) => await HandleSelectedStepChanged(e))" SelectedStep="@selectedStep" SelectedLink="@selectedLink" Records="@Records" WorkflowLinkChanged="@(async (item) => await HandleWorkflowLinkChanged(item))" LinkDropped="HandleLinkDropped"></WorkflowEditorStep>
            }

            @foreach (var link in Workflow.Links)
            {
                <path marker-end="url(#head)" stroke-width="2" fill="none" stroke="black" d="@GetLinkCoordinate(link)"></path>
            }
            @if (selectedLink != null)
            {
                <path marker-end="url(#head)" stroke-width="2" fill="none" stroke="black" d="@GetLinkCoordinate(selectedLink)"></path>
            }
            <defs>
                <marker id='head'
                        orient="auto"
                        markerWidth='3'
                        markerHeight='4'
                        refX='0.1'
                        refY='2'>
                    <path d='M0,0 V4 L2,2 Z' fill="black" />
                </marker>
            </defs>
        </svg>
    </RadzenColumn>
</RadzenRow>

@code {
    private ElementReference _divRef;
    private RadzenColumn _svgContainer;
    [Parameter] public List<FormRecord> Records { get; set; }
    private WorkflowViewerContext WorkflowContext { get; set; } = new WorkflowViewerContext();
    private WorkflowStep selectedStep { get; set; }
    private FormRecord selectedFormRecord;
    private WorkflowLink selectedLink { get; set; }
    private WorkflowRecord Workflow { get; set; } = new WorkflowRecord();
    private ElementReference svgRef;
    private Coordinate svgPosition;
    private string viewBox { get; set; }
    private string transform { get; set; } = "matrix(1 0 0 1 0 0)";
    private (double x, double y) previousMousePosition;
    private bool isMoving = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            var svgSize = await formBuilderJsService.GetSize(_svgContainer.Element);
            viewBox = $"0 0 {svgSize.width} {svgSize.height}";
        }
    }

    #region Drag & Drop UI element

    private async Task HandleSelectedStepChanged(WorkflowStep step)
    {
        svgPosition = await formBuilderJsService.GetPosition(svgRef);
        selectedStep = step;
        selectedFormRecord = null;
        selectedLink = null;
    }

    private async Task HandleDragStart(FormRecord record)
    {
        svgPosition = await formBuilderJsService.GetPosition(svgRef);
        selectedStep = null;
        selectedFormRecord = record;
        selectedLink = null;
    }

    private async Task HandleDragHover(DragEventArgs args)
    {
        var pos = await formBuilderJsService.GetPointInSvgSpace(args.ClientX, args.ClientY, svgRef);
        if (TryDragSelectedLink()) return;
        // TryDragSelectedStep();

        bool TryDragSelectedLink()
        {
            if (selectedLink == null || selectedLink.IsLinkHoverStep) return false;
            selectedLink.TargetCoordinate.X = pos.X;
            selectedLink.TargetCoordinate.Y = pos.Y;
            return true;
        }
    }

    private async Task HandleDrop(DragEventArgs args)
    {
        if (TryDropSelectedLink()) return;
        await TryDropFormRecord();
        selectedStep = null;

        bool TryDropSelectedLink()
        {
            if (selectedLink != null)
            {
                selectedLink = null;
                return true;
            }

            return false;
        }

        async Task<bool> TryDropFormRecord()
        {
            if (selectedFormRecord == null) return false;
            var id = Guid.NewGuid().ToString();
            var pos = await formBuilderJsService.GetPointInSvgSpace(args.ClientX, args.ClientY, svgRef);
            Workflow.Steps.Add(new WorkflowStep
            {
                Id = id,
                Coordinate = new Coordinate
                {
                    X = Math.Round(pos.X),
                    Y = Math.Round(pos.Y)
                },
                FormRecordName = selectedFormRecord.Name
            });
            selectedFormRecord = null;
            return true;
        }
    }

    #endregion

    #region Drag & Drop Arrow

    private void HandleLinkDropped(WorkflowStep workflowStep)
    {
        var clone = this.selectedLink.Clone();
        clone.TargetStepId = workflowStep.Id;
        Workflow.Links.Add(clone);
        selectedLink = null;
    }

    #endregion

    #region Handle pan

    private void HandleOnPanStart(MouseEventArgs args)
    {
        var numbers = viewBox.Split(' ').Select(n => double.Parse(n)).ToArray();
        var (x, y) = (numbers[0], numbers[1]);
        previousMousePosition = (args.ClientX + x, args.ClientY + y);
        isMoving = true;
    }

    private async Task HandleOnPanMove(MouseEventArgs args)
    {
        if (await TryMoveSelectedStep()) return;
        if (TryMove()) return;

        bool TryMove()
        {
            if (!isMoving) return false;
            var diffX = -(args.ClientX - previousMousePosition.x);
            var diffY = -(args.ClientY - previousMousePosition.y);
            var viewBoxInfo = GetViewBoxInfo();
            viewBox = $"{Math.Round(diffX)} {Math.Round(diffY)} {viewBoxInfo.width} {viewBoxInfo.height}";
            return true;
        }

        async Task<bool> TryMoveSelectedStep()
        {
            if (selectedStep == null) return false;
            var pos = await formBuilderJsService.GetPointInSvgSpace(args.ClientX, args.ClientY, svgRef);
            selectedStep.Coordinate.X = Math.Round(pos.X);
            selectedStep.Coordinate.Y = Math.Round(pos.Y);
            var links = Workflow.GetLinks(selectedStep);
            foreach (var link in links)
                link.UpdateCoordinate(selectedStep);
            return true;
        }
    }

    private void HandleOnPanLeave()
    {
        isMoving = false;
        selectedStep = null;
    }

    #endregion


    #region Handle zoom

    private async Task HandleZoom(WheelEventArgs args)
    {
        var scale = args.DeltaY / 1000;
        scale = Math.Abs(scale) < .1 ? .1 * args.DeltaY / Math.Abs(args.DeltaY) : scale;
        var pt = await formBuilderJsService.GetPointInSvgSpace(args.ClientX, args.ClientY, svgRef);
        var viewBoxInfo = GetViewBoxInfo();
        var xPropW = (pt.X - viewBoxInfo.x) / viewBoxInfo.width;
        var yPropH = (pt.Y - viewBoxInfo.y) / viewBoxInfo.height;
        var width2 = viewBoxInfo.width + viewBoxInfo.width * scale;
        var height2 = viewBoxInfo.height + viewBoxInfo.height * scale;
        var x2 = pt.X - xPropW * width2;
        var y2 = pt.Y - yPropH *height2;
        viewBox = $"{Math.Round(x2)} {Math.Round(y2)} {Math.Round(width2)} {Math.Round(height2)}";
    }

    #endregion

    private void HandleStepRemoved(WorkflowStep step)
    {
        Workflow.Steps.Remove(step);
        Workflow.Links = Workflow.Links.Where(l => !l.IsLinked(step.Id)).ToList();
    }

    private async Task HandleWorkflowLinkChanged((FormEltEventArgs args, WorkflowStep step) item)
    {
        var args = item.args;
        var parentStep = item.step;
        svgPosition = await formBuilderJsService.GetPosition(svgRef);
        var eltSize = await formBuilderJsService.GetSize(args.EltReference);
        var eltPosition = await formBuilderJsService.GetPosition(args.EltReference);
        var stepPosition = await formBuilderJsService.GetPosition(parentStep.EltRef);
        var coordinateRelativeToStep = eltPosition - stepPosition;
        selectedStep = null;
        selectedFormRecord = null;
        selectedLink = WorkflowLink.Create(parentStep.Id, args.Record, eltPosition - svgPosition, eltSize, coordinateRelativeToStep);
    }

    private string GetLinkCoordinate(WorkflowLink link)
        => $"M{link.SourceCoordinate.X} {link.SourceCoordinate.Y} {link.TargetCoordinate.X} {link.TargetCoordinate.Y}";

    private FormRecord GetFormRecord(string name)
        => Records.Single(t => t.Name == name);

    private (double x, double y, double width, double height) GetViewBoxInfo()
        => GetViewBoxInfo(viewBox);

    private (double x, double y, double width, double height) GetViewBoxInfo(string vb)
    {
        var numbers = vb.Split(' ').Select(n => double.Parse(n)).ToArray();
        return (numbers[0], numbers[1], numbers[2], numbers[3]);
    }
}