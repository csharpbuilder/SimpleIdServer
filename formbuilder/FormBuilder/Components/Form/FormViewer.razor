@using FormBuilder.Helpers
@using System.Text.Json.Nodes
@using FormBuilder.Rules
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Collections.Specialized
@using global::FormBuilder.Models
@inject IRenderFormElementsHelper renderFormsElementsHelper

@if (!IsInteractableElementEnabled)
{
    <div class="form">
        <div class="@($"form-content {(!IsEditModeEnabled ? "view" : "")}")">
            @{
                var formsActingAsStep = Context.Definition.Records.Where(s => s.ActAsStep).Select(s => s.Name);
                var workflowFormsActingAsStep = Context.Definition.Workflow.Steps.Select(s => s.FormRecordName).Where(s => formsActingAsStep.Contains(s));
                var currentFormRecord = Context.GetCurrentFormRecord();
                if (currentFormRecord.ActAsStep && IsNavigationDisplayed)
                {
                    <RadzenSteps ShowStepsButtons="false">
                        <Steps>
                            @foreach (var stepName in workflowFormsActingAsStep)
                            {
                                <RadzenStepsItem Text="@stepName" Disabled="@(stepName != currentFormRecord.Name)" Selected="@(stepName == currentFormRecord.Name)"></RadzenStepsItem>
                            }
                        </Steps>
                    </RadzenSteps>
                }
            }

            @if (Context.Execution != null)
            {
                if(Context.Execution.ErrorMessages != null)
                {
                    @foreach (var errorMessage in Context.Execution.ErrorMessages)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                            @errorMessage
                        </RadzenAlert>
                    }
                }

                if(Context.Execution.SuccessMessages != null)
                {
                    @foreach (var successMessage in Context.Execution.SuccessMessages)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
                            @successMessage
                        </RadzenAlert>
                    }
                }
            }

            @if (Form.Elements != null)
            {
                @CustomRender
            }
        </div>
    </div>
}
else
{
    @if (Form != null && Form.Elements != null)
    {
        @CustomRender
    }
}

@code {
    private RenderFragment? CustomRender { get; set; }
    [Inject] public IRuleEngine RuleEngine { get; set; }
    [Inject] public IJSRuntime jsRuntime { get; set; }
    [Parameter] public bool IsEditModeEnabled { get; set; }
    [Parameter] public bool IsInteractableElementEnabled { get; set; }
    [Parameter] public bool IsNavigationDisplayed { get; set; }
    [Parameter] public WorkflowContext Context { get; set; }   
    private FormRecord Form { get; set; } = null;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Context == null) return;
        Form = Context.GetCurrentFormRecord();
        if (Form == null) return;
        RuleEngine.Apply(Context);
        CustomRender = CreateComponent();
        Form.Elements.CollectionChanged += HandleChanged;
    }

    private RenderFragment CreateComponent() => builder =>
    {
        renderFormsElementsHelper.Render(builder, Form.Elements, Context, IsEditModeEnabled, IsInteractableElementEnabled);
    };

    private void HandleChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        CustomRender = CreateComponent();
        StateHasChanged();
    }
}