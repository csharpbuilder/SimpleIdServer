@page "/recurringjobs/{id}"
@using Fluxor.Blazor.Web.Components
@using Hangfire.Storage.Monitoring
@using SimpleIdServer.IdServer.Website.Resources
@using SimpleIdServer.IdServer.Website.Stores.RecurringJobStore
@using System.Text.Json
@inject IUrlHelper urlHelper
@inject IDispatcher dispatcher
@inject IState<RecurringJobState> recurringJobState
@inherits FluxorComponent

<SidAuthorizeView Roles=@("/recurringjobs/manage,/recurringjobs/view")>
    <Authorized>
        <RadzenBreadCrumb>
            <RadzenBreadCrumbItem Path="@urlHelper.GetUrl("/recurringjobs")" Text="@Global.RecurringJobs" />
            <RadzenBreadCrumbItem Text="@recurringJobState.Value.Id" />
        </RadzenBreadCrumb>

        <RadzenText class="mt-3 mb-3 no-margin" Text="@(string.Format(Global.RecurringJobExecutionHistory, recurringJobState.Value.Id))" TextStyle="TextStyle.DisplayH3" />

        <RadzenDataGrid @ref="stateHistoriesGrid"
        AllowFiltering="true"
        AllowColumnResize="true"
        AllowAlternatingRows="false"
        AllowSorting="true"
        PageSize="30"
        AllowPaging="true"
        PagerHorizontalAlign="HorizontalAlign.Left"
        ShowPagingSummary="true"
        IsLoading="@recurringJobState.Value.IsLoading"
        Count="@recurringJobState.Value.Count"
        Data="@recurringJobState.Value.Histories"
        FilterMode="FilterMode.Simple"
        LogicalFilterOperator="LogicalFilterOperator.And"
        FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive
        RowRender="@RowRender"
        TItem="StateHistoryDto"
        ColumnWidth="300px">
            <Columns>
                <RadzenDataGridColumn TItem="StateHistoryDto" Property="StateName" Filterable="true" Sortable="false" Title="@Global.State" Width="80px">
                    <Template Context="context">
                        <RadzenBadge BadgeStyle=BadgeStyle.Primary Text="@context.StateName"></RadzenBadge>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="StateHistoryDto" Property="Reason" Filterable="true" Sortable="false" Title="@Global.Reason" Width="80px" />
                <RadzenDataGridColumn TItem="StateHistoryDto" Property="CreatedAt" Filterable="true" Sortable="true" SortOrder=SortOrder.Descending Title="@Global.CreatedAt" Width="80px" />
            </Columns>
        </RadzenDataGrid>
    </Authorized>
    <NotAuthorized>
        <p>@Global.NotAuthorized</p>
    </NotAuthorized>
</SidAuthorizeView>

@code {
    RadzenDataGrid<StateHistoryDto> stateHistoriesGrid;

    [Parameter]
    public string id
    {
        get; set;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dispatcher.Dispatch(new GetRecurringJobAction { Id = id });
    }

    private void RowRender(RowRenderEventArgs<StateHistoryDto> row)
    {
        const string className = "class";
        if (row.Attributes.ContainsKey(className))
        {
            row.Attributes.Remove(className);
        }
    }
}
