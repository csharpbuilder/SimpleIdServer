@using FormBuilder.Models
@typeparam TRecord where TRecord : IFormElementRecord
@inject DialogService dialogService

@if (IsEditModeEnabled)
{
    <div class="@ClassName">
        @if (!IsInvolved)
        {
            <div class="toolbox">
                <ul>
                    <li><RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.ExtraSmall" Click="@HandleRemove" /></li>
                </ul>
            </div>
        }

        @Children
    </div>
}
else
{
    @Children
}

@code {
    [Parameter] public RenderFragment Children { get; set; }
    [Parameter] public WorkflowContext Context { get; set; }
    [Parameter] public ParentEltContext ParentContext { get; set; }
    [Parameter] public TRecord Record { get; set; }
    [Parameter] public bool IsEditModeEnabled { get; set; }

    public string ClassName
    {
        get
        {
            return $"editableLayoutContainer" + (IsInvolved ? " isInvolved" : string.Empty);
        }
    }

    public bool IsInvolved
    {
        get
        {
            return Context.FormEditorContext.IsEltInvolvedInWorkflow(Record, Context.GetCurrentFormRecord());
        }
    }

    private void HandleRemove()
    {
        var elt = ParentContext.Elements[ParentContext.Index];
        ParentContext.Elements.Remove(elt);
    }
}