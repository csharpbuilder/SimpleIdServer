@using FormBuilder.Helpers
@using System.Text.Json.Nodes
@using FormBuilder.Rules
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Collections.Specialized
@using global::FormBuilder.Models
@inject IRenderFormElementsHelper renderFormsElementsHelper
@implements IDisposable

<div class="form">
    <div class="@($"form-content {(!IsEditModeEnabled ? "view" : "editor")}")">
        @{
            if (Context.Definition.Workflow != null && Context.Definition.Records != null)
            {
                var formsActingAsStep = Context.Definition.Records.Where(s => s.ActAsStep);
                var workflowFormsActingAsStep = Context.Definition.Workflow.Steps.Select(s => formsActingAsStep.FirstOrDefault(st => st.Id == s.FormRecordId)).Where(s => s != null).Select(s => s.Name);
                var currentFormRecord = Context.GetCurrentFormRecord();
                if (IsNavigationDisplayed)
                {
                    <RadzenSteps ShowStepsButtons="false">
                        <Steps>
                            @foreach (var stepName in workflowFormsActingAsStep)
                            {
                                <RadzenStepsItem Text="@stepName" Disabled="@(stepName != currentFormRecord.Name)" Selected="@(stepName == currentFormRecord.Name)"></RadzenStepsItem>
                            }
                        </Steps>
                    </RadzenSteps>
                }
            }
        }

        @if (Context.Execution != null)
        {
            if (Context.Execution.ErrorMessages != null)
            {
                @foreach (var errorMessage in Context.Execution.ErrorMessages)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                        @errorMessage
                    </RadzenAlert>
                }
            }

            if (Context.Execution.SuccessMessages != null)
            {
                @foreach (var successMessage in Context.Execution.SuccessMessages)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
                        @successMessage
                    </RadzenAlert>
                }
            }
        }

        @if (Form?.Elements != null)
        {
            <RadzenStack>
                @CustomRender
            </RadzenStack>
        }
    </div>
</div>

@code {
    private RenderFragment? CustomRender { get; set; }
    [Inject] public IRuleEngine RuleEngine { get; set; }
    [Inject] public IJSRuntime jsRuntime { get; set; }
    [Parameter] public bool IsEditModeEnabled { get; set; }
    [Parameter] public bool IsNavigationDisplayed { get; set; }
    [Parameter] public WorkflowContext Context { get; set; }
    private FormRecord Form { get; set; } = null;

    public void Dispose()
    {
        if (Form != null) Form.Elements.CollectionChanged -= HandleChanged;
    }

    public void Set(WorkflowContext context)
    {
        Context = context;
        Init();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Context == null) return;
        Init();
    }

    private void Init()
    {
        Form = Context.GetCurrentFormRecord();
        if (Form == null) return;
        RuleEngine.Apply(Context);
        CustomRender = CreateComponent();
        Form.Elements.CollectionChanged += HandleChanged;
        Context.Execution.CurrentStepIdChanged += HandleCurrentStepIdChanged;
    }

    private RenderFragment CreateComponent() => builder =>
    {
        renderFormsElementsHelper.Render(builder, false, 0, Form.Elements, Context, IsEditModeEnabled);
    };

    private void HandleChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        CustomRender = CreateComponent();
        StateHasChanged();
    }

    private void HandleCurrentStepIdChanged(object sender, EventArgs args)
    {
        Reset();
        Init();
        StateHasChanged();
    }

    private void Reset()
    {
        if (Form != null) Form.Elements.CollectionChanged -= HandleChanged;
        if (Context != null) Context.Execution.CurrentStepIdChanged -= HandleCurrentStepIdChanged;
    }
}