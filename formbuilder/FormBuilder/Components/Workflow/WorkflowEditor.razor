@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using FormBuilder.Components.Form
@using FormBuilder.Components.Shared
@using FormBuilder.Dialogs
@using FormBuilder.Factories
@using FormBuilder.Models
@using System.Diagnostics
@using FormBuilder.Models.Layout
@using FormBuilder.Services
@using PT = Blazor.Diagrams.Core.Geometry.Point;
@using SZ = Blazor.Diagrams.Core.Geometry.Size;
@using System.Text.Json
@inject IJSRuntime jsRuntime
@inject IFormBuilderJsService formBuilderJsService
@inject DialogService dialogService

<RadzenDialog />
<RadzenNotification />
<MonacoCompletion Context="@Context" />

<div class="header">
    <RadzenButton Icon="play_arrow" ButtonStyle="ButtonStyle.Secondary" Text="Debug"  Click="@(async () => await LaunchDebug())" />
    <RadzenButton Icon="draft" ButtonStyle="ButtonStyle.Secondary" Text="Json" Click="@(() => ViewJson())" />
    <RadzenButton Icon="save" Text="Save" Click="@(async() => await Save())" Disabled="@isSaveDisabled" />
    <RadzenButton Icon="publish" Text="Publish" Click="@(async() => await Publish())" Disabled="@isPublishDisabled" />
</div>

<RadzenSplitter>
    <!-- Workflow -->
    <RadzenSplitterPane Size="80%">
        <div id="workflowEditor" @ref="diagramContainer" class="diagram-container">
            <CascadingValue Value="Diagram" IsFixed="true">
                <DiagramCanvas>
                    <Widgets>
                        <GridWidget Size="30" Mode="GridMode.Line" BackgroundColor="white" />
                        <NavigatorWidget Width="200" Height="120" Class="border border-black bg-white absolute" Style="bottom: 15px; right: 15px;" />
                    </Widgets>
                </DiagramCanvas>
            </CascadingValue>
        </div>
    </RadzenSplitterPane>
    <!-- Properties -->
    <RadzenSplitterPane Size="20%">
        <!-- Version -->
        <div class="panel-header">
            <RadzenText TextStyle="TextStyle.H6" class="title">Version</RadzenText>
        </div>
        <div class="panel-content">
            <RadzenText TextStyle="TextStyle.Subtitle2">Status : <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="@Enum.GetName(typeof(RecordVersionStatus), Workflow.Status)" /></RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2">Version : <RadzenBadge BadgeStyle="BadgeStyle.Primary" Text="@Workflow.VersionNumber.ToString()" /></RadzenText>
        </div>
        <!-- Property panel -->
        <div class="panel-header">
            <RadzenText TextStyle="TextStyle.H6" class="title">Properties</RadzenText>
        </div>
        <div class="panel-content">
            @if (panelType == FormPanelTypes.JSON)
            {
                <JsonPanelComponent @ref=jsonPanelComponent Json="@SerializedWorkflow" JsonChanged="HandleJsonChanged"></JsonPanelComponent>
            }
        </div>
    </RadzenSplitterPane>
</RadzenSplitter>

@code {
    [Parameter] public WorkflowRecord Workflow { get; set; }
    [Parameter] public List<FormRecord> Forms { get; set; }
    [Parameter] public List<WorkflowLayout> WorkflowLayouts { get; set; }

    [Inject] public IFormBuilderApiService formBuilderApiService { get; set; }
    [Inject] public NotificationService notificationService { get; set; }

    private WorkflowContext Context { get; set; }
    private ElementReference diagramContainer;
    private ElementReference svgRef;
    private (double x, double y) previousMousePosition;
    private bool isMoving = false;
    private bool isInitialized = false;
    private bool isSaveDisabled = false;
    private bool isPublishDisabled = false;
    private FormPanelTypes? panelType = null;
    private JsonPanelComponent jsonPanelComponent;
    private string SerializedWorkflow;

    private double spaceBetweenNodeXPx = 50;
    private double spaceBetweenNodeYPx = 150;
    private double paddingTopPx = 50;
    private SZ stepSize = new SZ(200, 70);
    private SZ endStepSize = new SZ(100, 100);
    private List<WorkflowLayout> availableLayouts { get; set; }

    private BlazorDiagram Diagram = new BlazorDiagram(new BlazorDiagramOptions
    {
        AllowMultiSelection = true,
        Zoom =
        {
            Enabled = true
        },
        Links =
        {
            DefaultRouter = new NormalRouter(),
            DefaultPathGenerator = new SmoothPathGenerator()
        }
    });

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && Forms != null && Workflow != null && Context == null)
        {
            if (!Forms.Any(f => f.CorrelationId == Constants.EmptyStep.CorrelationId)) Forms.Add(Constants.EmptyStep);
            Context = WorkflowContext.CreateWorkflow(Workflow, Forms);
            var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom =
                {
                    Enabled = false,
                },
                Links =
                {
                    DefaultRouter = new NormalRouter(),
                    DefaultPathGenerator = new SmoothPathGenerator()
                }
            };
            if (Diagram.Container == null) Diagram.ContainerChanged += OnContainerChanged;
            else Init();
            RefreshJson();
            Diagram.RegisterComponent<WorkflowStepNode, WorkflowStepNodeWidget>();
            Diagram.RegisterComponent<WorkflowStepChooserNode, WorkflowStepChooserNodeWidget>();
        }
    }

    private void HandleJsonChanged(string json)
    {
        var workflow = JsonSerializer.Deserialize<WorkflowRecord>(json);
        Refresh(workflow);
    }

    private void OnContainerChanged()
    {
        if (isInitialized) return;
        Init();
        isInitialized = true;
    }

    private void Init()
    {
        var firstStep = Context.GetFirstStep();
        RefreshAvailableLayouts();
        if(firstStep == null)
        {
            AddNode((Diagram.Container.Width / 2) - (stepSize.Width / 2), paddingTopPx, new WorkflowStepChooserNode(AddNode, availableLayouts));
            return;
        }

        AddNode(firstStep);
    }

    private void AddNode(WorkflowStep newStep)
        => AddNode(Diagram.Container.Width / 2, paddingTopPx, newStep);

    private NodeModel AddNode(double startPosX, double startPosY, WorkflowStep newStep, NodeModel source = null, int index = 0, string description = null)
    {
        var form = Context.Definition.Records.Single(r => r.Id == newStep.FormRecordId);
        var node = new WorkflowStepNode(newStep, form, EditNode);
        if (source != null) AddLink(source, node, description);
        node.AddPort(PortAlignment.Bottom);
        AddNode(startPosX, startPosY, node, source, index);
        var stepLinks = Context.Definition.Workflow.Links.Where(l => l.SourceStepId == newStep.Id).ToList();
        var nbLinks = stepLinks.Count();
        startPosY = startPosY + spaceBetweenNodeYPx;
        startPosX = (stepLinks.Count() == 1) ? startPosX : (
            (stepLinks.Count() % 2 == 0 ? 
                (startPosX + (stepSize.Width / 2) - ((spaceBetweenNodeXPx + stepSize.Width) * (nbLinks / 2))) :
                (startPosX - (spaceBetweenNodeXPx + stepSize.Width) * (nbLinks / 2))
            )
        );
        int i = 0;
        foreach(var stepLink in stepLinks)
        {
            var nextStep = Context.Definition.Workflow.Steps.SingleOrDefault(s => s.Id == stepLink.TargetStepId);
            NodeModel childNode = null;
            if (nextStep != null) childNode = AddNode(startPosX, startPosY, nextStep, node, i, stepLink.Description);
            else 
            {
                childNode = new WorkflowStepChooserNode(AddNode, availableLayouts);
                AddNode(startPosX, startPosY, childNode, node, i);
            }

            AddLink(node, childNode, stepLink.Description);
            i++;
        }

        return node;
    }

    private void AddLink(NodeModel sourceNode, NodeModel targetNode, string description)
    {
        var sourceAnchor = new ShapeIntersectionAnchor(sourceNode);
        var topPort = targetNode.AddPort(PortAlignment.Top);
        var targetAnchor = new SinglePortAnchor(topPort);
        var model = new LinkModel(sourceAnchor, targetAnchor);
        model.Labels.Add(new LinkLabelModel(model, description));
        Diagram.Links.Add(model);
    }

    private void AddNode<T>(double startPosX, double startPosY, T node, NodeModel source = null, int index = 0) where T : NodeModel
    {
        var posX = source == null ? startPosX : startPosX + (index * (stepSize.Width + spaceBetweenNodeXPx));
        var posY = startPosY;
        node.Position = new PT(posX, posY);
        Diagram.Nodes.Add(node);
    }

    private void AddNode(WorkflowStepChooserNode source, WorkflowStepChooserRecord record)
    {
        var sourceLink = Diagram.Links.FirstOrDefault(l =>
        {
            var targetModel = l.Target?.Model as PortModel;
            if (targetModel == null) return false;
            return targetModel.Parent is NodeModel targetNodeModel && targetNodeModel.Id == source.Id;
        });
        var sourceModel = sourceLink?.Source?.Model as NodeModel;
        WorkflowStep newStep = null;
        // 1. Generate and add a new step with its links.
        if(!record.IsEndStep) newStep = AddWorkflowStep(record.WorkflowCorrelationId, sourceModel);
        else newStep = AddEndStep(sourceModel); 
        // 2. Add node to diagram.
        if (!record.IsEndStep) availableLayouts.Remove(availableLayouts.Single(l => l.WorkflowCorrelationId == record.WorkflowCorrelationId));
        AddNode(source.Position.X, source.Position.Y, newStep, sourceModel, 0, description: sourceLink?.Labels?.FirstOrDefault()?.Content);
        Diagram.Nodes.Remove(source);
        RefreshJson();
    }

    private void EditNode(WorkflowStepNode node)
    {
        var sourceLink = Diagram.Links.FirstOrDefault(l =>
        {
            var targetModel = l.Target?.Model as PortModel;
            if (targetModel == null) return false;
            return targetModel.Parent is NodeModel targetNodeModel && targetNodeModel.Id == node.Id;
        });
        var sourceNode = sourceLink?.Source?.Model as NodeModel;
        // 1. Remove the current node and its links.
        Remove(node);
        // 2. Add the step chooser.
        RefreshAvailableLayouts();
        var newStep = new WorkflowStepChooserNode(AddNode, availableLayouts);
        AddNode(node.Position.X, node.Position.Y, newStep, sourceNode);
        if(sourceNode != null) AddLink(sourceNode, newStep, sourceLink.Labels.First().Content);
        RefreshJson();
    }

    private void Remove(NodeModel node)
    {
        if (node is WorkflowStepNode workflowStepNode) Remove(workflowStepNode.Step);
        var links = Diagram.Links.Where(l =>
        {
            var sourceModel = l.Source?.Model as NodeModel;
            return sourceModel != null && sourceModel.Id == node.Id;
        }).ToList();
        var targetSteps = links.Select(l => (l.Target.Model as PortModel).Parent as NodeModel);
        foreach (var targetStep in targetSteps)
            Remove(targetStep);

        foreach (var link in links)
            Diagram.Links.Remove(link);

        Diagram.Nodes.Remove(node);
    }

    private void Remove(WorkflowStep workflowStep)
    {
        var links = Context.Definition.Workflow.Links.Where(l => l.SourceStepId == workflowStep.Id).ToList();
        var targetedStepIds = links.Select(l => l.TargetStepId);
        var targetedSteps = Context.Definition.Workflow.Steps.Where(s => targetedStepIds.Contains(s.Id)).ToList();
        foreach (var targetedStep in targetedSteps)
            Remove(targetedStep);
        foreach(var link in links)
            Context.Definition.Workflow.Links.Remove(link);
        Context.Definition.Workflow.Steps.Remove(workflowStep);
    }

    private WorkflowStep AddEndStep(NodeModel sourceNodeModel = null)
    {
        var formRecord = Forms.Single(r => r.CorrelationId == Constants.EmptyStep.CorrelationId);
        var newStep = new WorkflowStep
        {
            Id = Guid.NewGuid().ToString(),
            FormRecordId = formRecord.Id
        };
        UpdateLink(newStep, sourceNodeModel);
        Context.Definition.Workflow.Steps.Add(newStep);
        return newStep;
    }

    private WorkflowStep AddWorkflowStep(string correlationId, NodeModel sourceNodeModel = null)
    {
        var layout = WorkflowLayouts.Single(l => l.WorkflowCorrelationId == correlationId);
        var formRecord = Forms.Single(r => r.CorrelationId == layout.SourceFormCorrelationId);
        var newStep = new WorkflowStep
        {
            Id = Guid.NewGuid().ToString(),
            FormRecordId = formRecord.Id
        };
        var resolvedSteps = Forms.Where(f => layout.Links.Where(l => !string.IsNullOrWhiteSpace(l.TargetFormCorrelationId)).Select(l => l.TargetFormCorrelationId).Contains(f.CorrelationId))
            .Select(f => new WorkflowStep
                {
                    Id = Guid.NewGuid().ToString(),
                    FormRecordId = f.Id,
                }).ToList();
        var links = layout.Links.Select(l =>
        {
            var source = new WorkflowLinkSource
            {
                EltId = formRecord.GetChildByCorrelationId(l.EltCorrelationId).Id,
            };
            var form = Forms.SingleOrDefault(r => r.CorrelationId == l.TargetFormCorrelationId);
            var targetStep = resolvedSteps.SingleOrDefault(s => s.FormRecordId == form?.Id);
            var targetStepId = targetStep?.Id;
            return new WorkflowLink
            {
                Id = Guid.NewGuid().ToString(),
                SourceStepId = newStep.Id,
                Source = source,
                ActionType = l.ActionType,
                ActionParameter = l.ActionParameter,
                Description = l.Description,
                TargetStepId = targetStepId
            };
        });
        Context.Definition.Workflow.Steps.Add(newStep);
        Context.Definition.Workflow.Steps.AddRange(resolvedSteps);
        Context.Definition.Workflow.Links.AddRange(links);
        UpdateLink(newStep, sourceNodeModel);
        return newStep;
    }

    private void UpdateLink(WorkflowStep newStep, NodeModel sourceNodeModel)
    {
        var sourceWorkflowStepNode = sourceNodeModel as WorkflowStepNode;
        if (sourceWorkflowStepNode != null)
        {
            var sourceLinks = Context.Definition.Workflow.Links.Where(l => l.SourceStepId == sourceWorkflowStepNode.Step.Id).ToList();
            sourceLinks.ForEach(l => l.TargetStepId = newStep.Id);
        }
    }

    private void RefreshAvailableLayouts()
    {
        var workflowFormsCorrelationId = Forms.Where(f => Workflow.Steps.Select(s => s.FormRecordId).Contains(f.Id)).Select(f => f.CorrelationId);
        availableLayouts = WorkflowLayouts.Where(l => !workflowFormsCorrelationId.Contains(l.SourceFormCorrelationId)).ToList();
    }

    private List<WorkflowLink> GetEmptyLinks()
        => Context.Definition.Workflow.Links.Where(l => l.TargetStepId == null).ToList();

    private async Task LaunchDebug()
    {
        var opts = new DialogOptions
        {
            Width = "1200px"
        };
        await dialogService.OpenAsync<DebugWorkflowDialog>("Debug", new Dictionary<string, object>
        {
            { nameof(DebugWorkflowDialog.Context), Context }
        }, opts);
    }

    private async Task Save()
    {
        isSaveDisabled = true;
        await formBuilderApiService.UpdateWorkflow(Context.Definition.Workflow, CancellationToken.None);
        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "The workflow is saved" });
        isSaveDisabled = false;
    }

    private async Task Publish()
    {
        isPublishDisabled = true;
        var workflow = await formBuilderApiService.PublishWorkflow(Context.Definition.Workflow.Id, CancellationToken.None);
        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "The workflow is published" });
        Refresh(workflow);
        isPublishDisabled = false;
    }

    private void ViewJson()
    {
        Serialize();
        panelType = FormPanelTypes.JSON;
    }

    private void RefreshJson()
    {
        Serialize();
        if (jsonPanelComponent != null) jsonPanelComponent.Refresh(SerializedWorkflow);
    }

    private void Serialize()
        => SerializedWorkflow = JsonSerializer.Serialize(Context.Definition.Workflow, new JsonSerializerOptions { WriteIndented = true });

    private void Refresh(WorkflowRecord workflow)
    {
        CleanDiagram();
        Context = WorkflowContext.CreateWorkflow(workflow, Forms);
        Workflow = workflow;
        Init();
    }

    private void CleanDiagram()
    {
        foreach (var record in Diagram.Nodes.ToList())
            Diagram.Nodes.Remove(record);
        foreach (var link in Diagram.Links.ToList())
            Diagram.Links.Remove(link);
    }

    private FormRecord GetFormRecord(string name)
        => Context.Definition.Records.Single(t => t.Name == name);
}