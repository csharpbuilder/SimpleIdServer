@using BlazorMonaco.Editor
@using FormBuilder.Controllers
@using FormBuilder.Helpers
@using System.Text.Json
@using System.Text
@using FormBuilder.Services
@using static BlazorMonaco.Editor.Global

<RadzenStack>
    <StandaloneCodeEditor @ref=editor OnDidChangeModelContent="HandleOnEditorContentChanged" ConstructionOptions="EditorConstructionOptions" CssClass="cssEditor" />
    <RadzenButton Text="Save" Disabled="@isDisabled" Click="@(async () => await HandleSave())" ButtonStyle="ButtonStyle.Primary" class="fullWidth"></RadzenButton>
</RadzenStack>

@code {
    private StandaloneCodeEditor editor;
    private bool isDisabled { get; set; }
    [Parameter] public string FormId { get; set; }
    [Parameter] public string Css { get; set; }
    [Parameter] public EventCallback<ActionState> CssSavedEvt { get; set; }
    [Inject] public IUriProvider uriProvider { get; set; }
    [Inject] public IJSRuntime jSRuntime { get; set; }
    [Inject] public DialogService dialogService { get; set; }
    [Inject] public NotificationService notificationService { get; set; }
    [Inject] public IFormBuilderJsService formBuilderJsService { get; set; }

    private async Task HandleOnEditorContentChanged()
    {
        Css = await editor.GetValue();
        var diagnostics = await BlazorMonaco.Editor.Global.GetModelMarkers(jSRuntime, new GetModelMarkersFilter { Owner = "css" });
        if (diagnostics.Any()) return;
        await formBuilderJsService.RefreshCss(Css);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "css",
            Value = Css
        };
    }

    private async Task HandleSave()
    {
        isDisabled = true;
        using(var httpClient = new HttpClient())
        {
            var url = uriProvider.GetActiveFormCssUrl(FormId);
            var requestMessage = new HttpRequestMessage
            {
                Content = new StringContent(JsonSerializer.Serialize(new UpdateFormStyleCommand { Content = Css }), Encoding.UTF8, "application/json"),
                Method = HttpMethod.Put,
                RequestUri = new Uri(url)
            };
            await httpClient.SendAsync(requestMessage);
            await formBuilderJsService.RefreshCss(Css);
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "The css style has been updated" });
            dialogService.Close();
            isDisabled = false;
        }
    }
}
