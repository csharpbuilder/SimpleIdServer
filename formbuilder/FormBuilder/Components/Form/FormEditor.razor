@using BlazorMonaco.Languages
@using FormBuilder.Components.Shared
@using FormBuilder.Dialogs
@using FormBuilder.Helpers
@using FormBuilder.Models
@using System.Text.Json.Nodes
@using System.Text.Json
@using FormBuilder.Models.Layout
@inject DialogService dialogService
@inject IEnumerable<IFormElementDefinition> definitions
@inject IJSRuntime jsRuntime

<RadzenDialog />
<RadzenNotification />
<MonacoCompletion Context="@context" />

<div class="header">
    <RadzenButton Icon="play_arrow" Text="Debug" Click="@(async () => await LaunchDebug())" />
    <RadzenButton Icon="draft" Text="Json" Click="@(async() => await ViewJson())" />
    <RadzenButton Icon="save" Text="Save" Click="@(async() => await Save())" Disabled="@isSaveDisabled" />
    <RadzenButton Icon="publish" Text="Publish" Click="@(async() => await Publish())" Disabled="@isPublishDisabled" />
</div>

<RadzenRow class="fullHeight">
    <RadzenColumn Size="2">
        <RadzenStack class="toolbar fullHeight">
            <div class="category">
                <RadzenText TextStyle="TextStyle.H6" class="title">Elements</RadzenText>
                <ul class="elements">
                    @foreach (var def in definitions.Where(d => d.Category == ElementDefinitionCategories.ELEMENT))
                    {
                        <li draggable="true" @ondragstart="@(() => HandleDragStart(def))">
                            <div class="icon"><RadzenIcon Icon="@def.Icon" class="icon" /></div><span class="text">@def.Type</span>
                        </li>
                    }
                </ul>
            </div>
            <div class="category">
                    <RadzenText TextStyle="TextStyle.H6" class="title">Layout</RadzenText>
                    <ul class="elements">
                        @foreach (var def in definitions.Where(d => d.Category == ElementDefinitionCategories.LAYOUT))
                        {
                            <li>
                                <div class="icon"><RadzenIcon Icon="@def.Icon" class="icon" /></div><span class="text">@def.Type</span>
                            </li>
                        }
                    </ul>
                </div>
            <div class="category">
                    <RadzenText TextStyle="TextStyle.H6" class="title">Data</RadzenText>
                    <ul class="elements">
                        @foreach (var def in definitions.Where(d => d.Category == ElementDefinitionCategories.DATA))
                        {
                            <li>
                                <div class="icon"><RadzenIcon Icon="@def.Icon" class="icon" /></div><span class="text">@def.Type</span>
                            </li>
                        }
                    </ul>
            </div
            <div class="category">
                <RadzenText TextStyle="TextStyle.H6" class="title">Style</RadzenText>
                <ul class="elements">                    
                    <li @onclick="@(async (e) => await HandleEditCss())" class="clickable">
                        <div class="icon"><RadzenIcon Icon="css" class="icon" /></div><span class="text">CSS</span>
                    </li>
                </ul>
            </div>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="10">
        <FormViewer IsEditModeEnabled="true" Context="@context" />
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter] public FormRecord Form { get; set; }
    [Parameter] public WorkflowLayout WorkflowLayout { get; set;}
    [Parameter] public EventCallback<ActionState> PublishedEvt { get; set; }
    [Parameter] public EventCallback<ActionState> SavedEvt { get; set; }
    WorkflowContext context = null;
    private bool isSaveDisabled = false;
    private bool isPublishDisabled = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Form != null && context == null) 
        {
            context = WorkflowContext.CreateOneStepWorkflow(Form, WorkflowLayout);
        }
    }

    private void HandleDragStart(IFormElementDefinition def)
    {
        context.FormEditorContext.SelectDefinition(def);
    }

    private Task LaunchDebug()
    {
        var opts = new DialogOptions
        {
            Width = "1200px"
        };
        return dialogService.OpenAsync<DebugFormDialog>("", new Dictionary<string, object>
        {
            { nameof(DebugFormDialog.Form), Form }
        }, opts);
    }

    private Task ViewJson()
    {
        return dialogService.OpenAsync<ViewFormJsonDialog>("", new Dictionary<string, object>
        {
            { nameof(ViewFormJsonDialog.Form), Form }
        });
    }

    private Task HandleEditCss()
    {
        return dialogService.OpenAsync<EditFormCssStyleDialog>("", new Dictionary<string, object>
        {
            { nameof(EditFormCssStyleDialog.FormId), Form.Id }
        });
    }

    private async Task Save()
    {
        isSaveDisabled = true;
        await SavedEvt.InvokeAsync(new ActionState(() =>
        {
            isSaveDisabled = false;
        }));
    }

    private async Task Publish()
    {
        isPublishDisabled = true;
        await PublishedEvt.InvokeAsync(new ActionState(() =>
        {
            isPublishDisabled = false;
        }));
    }
}