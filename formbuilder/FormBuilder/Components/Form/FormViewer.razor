@using FormBuilder.Helpers
@using System.Text.Json.Nodes
@using FormBuilder.Rules
@using System.Collections.ObjectModel
@using System.ComponentModel
@using System.Collections.Specialized
@using global::FormBuilder.Models
@inject IRenderFormElementsHelper renderFormsElementsHelper
@inject IHtmlClassResolver htmlClassResolver
@implements IDisposable

<div class="@ContainerClass">
    <div class="@ContentClass">
        <div class="@FormContainerClass">
            <div class="@FormContentClass">
                @{
                    if (Context.Definition.Workflow != null && Context.Definition.Records != null)
                    {
                        var formsActingAsStep = Context.Definition.Records.Where(s => s.ActAsStep);
                        var authSteps = new List<WorkflowStep>();
                        authSteps.AddRange(Context.Definition.Workflow.GetAllParentMainLinks(Context.Execution.CurrentStepId));
                        authSteps.Add(Context.Definition.Workflow.Steps.Single(s => s.Id == Context.Execution.CurrentStepId));
                        authSteps.AddRange(Context.Definition.Workflow.GetAllChildrenMainLinks(Context.Execution.CurrentStepId));
                        var workflowFormsActingAsStep = Context.Definition.Workflow.Steps.Select(s => formsActingAsStep.FirstOrDefault(st => st.CorrelationId == s.FormRecordCorrelationId))
                        .Where(s => s != null && authSteps.Any(a => a.FormRecordCorrelationId == s.CorrelationId))
                        .Select(s => s.Name);
                        var currentFormRecord = Context.GetCurrentFormRecord();
                        if (IsNavigationDisplayed)
                        {
                            <RadzenSteps ShowStepsButtons="false">
                                <Steps>
                                    @foreach (var stepName in workflowFormsActingAsStep)
                                    {
                                        <RadzenStepsItem Text="@stepName" Disabled="@(stepName != currentFormRecord.Name)" Selected="@(stepName == currentFormRecord.Name)"></RadzenStepsItem>
                                    }
                                </Steps>
                            </RadzenSteps>
                        }
                    }
                }

                @if (Context.Execution != null)
                {
                    if (Context.Execution.ErrorMessages != null)
                    {
                        @foreach (var errorMessage in Context.Execution.ErrorMessages)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter">
                                @errorMessage
                            </RadzenAlert>
                        }
                    }

                    if (Context.Execution.SuccessMessages != null)
                    {
                        @foreach (var successMessage in Context.Execution.SuccessMessages)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter">
                                @successMessage
                            </RadzenAlert>
                        }
                    }
                }

                @if (Form?.Elements != null)
                {
                    <RadzenStack class="">
                        @CustomRender
                    </RadzenStack>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private RenderFragment? CustomRender { get; set; }
    [Inject] public IRuleEngine RuleEngine { get; set; }
    [Inject] public IJSRuntime jsRuntime { get; set; }
    [Parameter] public bool IsEditModeEnabled { get; set; }
    [Parameter] public bool IsNavigationDisplayed { get; set; }
    [Parameter] public WorkflowContext Context { get; set; }
    private FormRecord Form { get; set; } = null;

    string ContainerClass
    {
        get
        {
            var result = "form";
            var resolvedClass = htmlClassResolver.Resolve(Form, FormElementNames.Container, Context);
            if (!string.IsNullOrWhiteSpace(resolvedClass))
            {
                result += $" {resolvedClass}";
            }

            return result;
        }
    }

    string ContentClass
    {
        get
        {
            var result = $"form-content {(!IsEditModeEnabled ? "view" : "editor")}";
            var resolvedClass = htmlClassResolver.Resolve(Form, FormElementNames.Content, Context);
            if (!string.IsNullOrWhiteSpace(resolvedClass))
            {
                result += $" {resolvedClass}";
            }

            return result;
        }
    }

    string FormContainerClass
    {
        get
        {
            return htmlClassResolver.Resolve(Form, FormElementNames.FormContainer, Context);
        }
    }

    string FormContentClass
    {
        get
        {
            return htmlClassResolver.Resolve(Form, FormElementNames.FormContent, Context);
        }
    }

    public void Dispose()
    {
        if (Form != null) Form.Elements.CollectionChanged -= HandleChanged;
    }

    public void Set(WorkflowContext context)
    {
        Context = context;
        Init();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Context == null) return;
        Init();
    }

    private void Init()
    {
        Form = Context.GetCurrentFormRecord();
        if (Form == null) return;
        RuleEngine.Apply(Context);
        CustomRender = CreateComponent();
        Form.Elements.CollectionChanged += HandleChanged;
        Context.Execution.CurrentStepIdChanged += HandleCurrentStepIdChanged;
    }

    private RenderFragment CreateComponent() => builder =>
    {
        renderFormsElementsHelper.Render(builder, false, 0, Form.Elements, Context, IsEditModeEnabled);
    };

    private void HandleChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        CustomRender = CreateComponent();
        StateHasChanged();
    }

    private void HandleCurrentStepIdChanged(object sender, EventArgs args)
    {
        Reset();
        Init();
        StateHasChanged();
    }

    private void Reset()
    {
        if (Form != null) Form.Elements.CollectionChanged -= HandleChanged;
        if (Context != null) Context.Execution.CurrentStepIdChanged -= HandleCurrentStepIdChanged;
    }
}